import Header from "../../../commonComponents/header/Header.jsx";
import css from "./Faq.module.css";
import Footer from "../../../commonComponents/footer/Footer.jsx";
import infoIco from './static/info_ico.svg';
import faqExample from './static/faq_example.png';

export default function Faq() {
    const card = (title, description) => {
        return {title: title, description: description}
    }

    let groups = {
        "Проверка работ": [
            card(
                "Основной принцип проверки работ",
                (<div className={css.faqCard__description}>Алгоритм проверки документов задуман как "ленивый" алгоритм -
                    если соблюдены необходимые условия,
                    то осуществляется переход в новое состояние без проверки на то, что это может быть другое состояние,
                    но не совсем корректное.<br/> Например, если заголовок раздела не подходит под шаблон
                    <code>{`{НОМЕР_РАЗДЕЛА_БЕЗ_ТОЧКИ_НА_КОНЦЕ}`} НАЗВАНИЕ РАЗДЕЛА БЕЗ ТОЧКИ НА КОНЦЕ</code>, то вариант
                    "1.4. Описание работы." <b>не</b> будет распознан как заголовок. <b>Также как заголовок не будут
                        проверяться автоматические списки!</b>
                    Те же правила применимы к форматам названий таблиц, рисунков, приложений и т.&nbspп. Но такие
                    элементы дадут понять что с ними что-то не
                    так - они будут проверяться по иным правилам и не будут подходить под нужные правила оформления, тем
                    самым выдавая несколько ошибок.</div>)
            ),
            card(
                "Превью документа",
                (<div className={css.faqCard__description}>Превью документа в браузере (он же рендер) не является
                    основным способом просмотра результата
                    и изначально задумывался как <b>вспомогательный</b> инструмент для быстрой локализации ошибки и ее
                    исправления без необходимости скачивать результат. Мы стремимся как можно сильнее приблизиться к
                    такой точности, чтобы рендеринг был практически неотличим от визуализации MS Word, но это очень
                    объемная и не
                    самая приоритетная задача.</div>)
            ),
            card(
                "Блоки кода",
                (<div className={css.faqCard__description}>Алгоритм <b>умеет</b> проверять блоки кода! Для этого всего
                    лишь надо окружить
                    необходимый блок кода невидимыми тегами. Для примера возьмем следующий код:
                    <pre><code>{`tailrec fun fibonacci(num: Int, a: Int = 0, b: Int = 1): Int {\n\treturn if (num == 0) a else fibonacci(num - 1, b, a + b)\n}`}</code></pre>

                    Чтобы алгоритм понял, что это блок кода, поставьте <b>перед</b> блоком кода
                    тег <code>{`/**normative*control*code*start**/`}</code>
                    либо <code>{`/**c*s**/`}</code>, а <b>в конце</b>
                    <code>{`/**normative*control*code*end**/`}</code> или <code>{`/**c*e**/`}</code>.
                    Пример выше будет выглядеть следующим образом:<br/><br/>

                    <pre><code>{`/**c*s**/tailrec fun fibonacci(num: Int, a: Int = 0, b: Int = 1): Int {\n\treturn if (num == 0) a else fibonacci(num - 1, b, a + b)\n}/**c*e**/\n`}</code></pre>

                    Затем необходимо скрыть эти теги. В MS Word:
                    <ol>
                        <li>Для этого выделите тег, нажмите на него правой кнопкой мыши и перейдите в раздел
                            "Шрифт...";
                        </li>
                        <li>В меню "Шрифт" найдите пункт "скрытый" и установите галочку напротив него в состояние Вкл.
                        </li>
                        <li>Готово! Нажмите "ОК".</li>
                    </ol>

                    Теперь при обычном просмотре эти теги не будут видны, но они будут видны алгоритму. Чтобы включить
                    их отображение,
                    нажмите <code>Ctrl + *</code> (для MS Word). Разумеется, такой подход несет свои минусы: при
                    включенном режиме отображения
                    непечатаемых символов весь текст может "уползти" вниз, так как теги начнут занимать место.
                    Рекомендуем писать работу
                    с выключенным отображением непечатаемых символов.<br/>
                    Если у вас есть идея как можно идентифицировать блоки кода в тексте более простым и эффективным
                    способом, просим
                    поделиться ей через форму обратной связи.</div>)
            ),
            card(
                "Почему сервис выделяет пустой текст как ошибку?",
                (<div className={css.faqCard__description}>Некоторые ошибки действительно могут быть найдены в пустых
                    местах, и это <b>не является</b> ошибкой
                    работы сервиса. Как правило, такие ошибки влияют на размеры отображения элементов, из-за чего в
                    последствии может "уехать" текст всего документа. К таким ошибкам относятся: размер шрифта, сам
                    шрифт,
                    всевозможные отступы. Не относятся: ошибки цвета текста, его начертания (кроме его толищны) и т. п.
                </div>)
            ),
        ],
        "Работа сервиса": [
            card("Сервис нашел ошибку, которой у меня нет, что делать?",
                (<div className={css.faqCard__description}>Если вы считаете, что такой ошибки нет в Вашей работе (такое
                    иногда бывает, появление
                    некоторых ошибок мы действительно не можем обосновать ничем, кроме как дополнительной магией в
                    MS Office, например:
                    <a href={faqExample} target="_blank" rel="noopener noreferrer">
                        <img className={css.faqCard__image} src={faqExample}
                             alt={'Пример проблемы с нахождением несуществующей ошибки'}/>
                    </a>
                    <br/>При этом всем в дереве стилей действительно нет ни одного нулевого
                    значения, в следствие чего сервис делает вывод, что в заголовке есть ошибка), то вы можете
                    нажать на кнопку "рупора" напротив спорной ошибки. Такая ошибка будет отмечена у Вашего
                    нормоконтролера
                    как спорная, чтобы он уделил ей особое внимание и смог изменить свой вердикт о качестве работы.
                </div>))
        ],
        "Известные ошибки": [
            card("Картинка распознается как текст",
                (<div className={css.faqCard__description}>Вероятнее всего, картинка была вставлена неправильно.
                    Для начала, удалите проблемное изображение и все пустые параграфы вокруг изображения
                    (в них может содержаться скрытая информация об изображении, которую не будет видно при просмотре
                    документа, но будет видно сервису во время проверки). Затем скопируйте <b>само</b> изображение
                    в буфер обмена (если изображение из интернета: в браузере нажмите на него правой кнопкой мыши,
                    выберите "Копировать картинку"). Затем вернитесь к документу и вставьте изображение в работу
                    (правая кнопка мыши - Вставить). Как правило, такие ошибки появляются тогда, когда картинка
                    была вставлена через ссылку/иным способом, отличным от копирования самой картинки. Если данный
                    способ не помог исправить ситуацию, Вы всегда можете воспользоваться функцией
                    "<a href="/faq#Сервис нашел ошибку, которой у меня нет, что делать?">Спорная ошибка</a>".</div>)),
        ]
    }

    return (
        <div>
            <Header/>
            <div className={css.faq}>
                <div className={css.header}>Помощь и поддержка</div>
                <div className={css.container}>
                    <div className={css.left__panel}>
                        <p className={css.leftTitle}>Быстрый переход</p>
                        {
                            Object.entries(groups).map(([name, cards]) => {
                                return <div className={css.group__left} key={name}>
                                    <p className={css.groupName__left}>{name}</p>
                                    {
                                        cards.map(card => {
                                            return <a
                                                className={css.card__left}
                                                key={card.title}
                                                href={`#${card.title}`}
                                            >
                                                {card.title}
                                            </a>
                                        })
                                    }
                                </div>
                            })
                        }
                    </div>
                    <div className={css.right__panel}>
                        {
                            Object.entries(groups).map(([name, cards]) => {
                                return <div key={name} className={css.cardGroup}>
                                    <p className={css.groupTitle}>{name}</p>
                                    {
                                        cards.map(card => {
                                            return <div key={card.title} id={card.title} className={css.faqCard}>
                                                <div className={css.faqCard__header}>
                                                    <img src={infoIco}
                                                         alt={'Иконка заголовка часто задаваемого вопроса'}/>
                                                    <a className={css.faqCard__title} id={card.title}>{card.title}</a>
                                                </div>
                                                {card.description}
                                            </div>
                                        })
                                    }
                                </div>
                            })
                        }
                    </div>
                </div>
            </div>
            <Footer/>
        </div>
    );
}